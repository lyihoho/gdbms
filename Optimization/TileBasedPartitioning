import duckdb
import time

# Connect to the DuckDB database
con = duckdb.connect(database='C:/Users/ASUS/PycharmProjects/PythonProject/database.duckdb')
con.execute("INSTALL spatial")
con.execute("LOAD spatial")

# Create basic tiles
con.execute("""
    CREATE TABLE IF NOT EXISTS tiles AS
    SELECT 
        tile_id,
        ST_MakeEnvelope(
            -180 + (tile_id % 36) * 10,
            -90 + (tile_id / 36) * 10,
            -170 + (tile_id % 36) * 10,
            -80 + (tile_id / 36) * 10
        ) as tile_geom
    FROM (SELECT row_number() OVER () - 1 as tile_id FROM range(648)) t;
""")

start_time = time.time()

# Original query with tile partitioning
result = con.execute("""
    WITH edge_tiles AS (
        SELECT e.*, t.tile_id
        FROM edges e
        JOIN tiles t ON ST_Intersects(e.geom, t.tile_geom)
    ),
    calculated_distances AS (
        SELECT 
            id_1, 
            id_2, 
            ST_Distance(geom, ST_GeomFromText('LINESTRING(0 0, 10 10)')) AS distance
        FROM edge_tiles
    )
    SELECT 
        id_1, 
        COUNT(id_2) AS total_connections, 
        AVG(distance) AS avg_distance, 
        MAX(distance) AS max_distance
    FROM calculated_distances
    WHERE distance > 1000
    GROUP BY id_1
    HAVING AVG(distance) > 100
    ORDER BY total_connections DESC
    LIMIT 15;
""").fetchall()

end_time = time.time()

print(result)
print("Query execution time: {:.9f} seconds".format(end_time - start_time))
